// --- NEW: AUTHENTICATION STAGE ---
    // 1. Get username and password from user
    std::string username;
    std::cout << "Username: ";
    std::getline(std::cin, username);
    // std::string password = get_password_from_stdin(); // Securely get password
    
    std::string password = "Batw1ngs-Adm1n1!"; // Securely get password

    // 2. Send username
    std::vector<unsigned char> username_bytes(username.begin(), username.end());
    if (!send_encrypted_message(sock, username_bytes, session_key))
    {
        std::cerr << "[Client] Failed to send username." << std::endl;
        close(sock);
        delete[] session_key;
        return;
    }

    // 3. Send password
    std::vector<unsigned char> password_bytes(password.begin(), password.end());
    if (!send_encrypted_message(sock, password_bytes, session_key))
    {
        std::cerr << "[Client] Failed to send password." << std::endl;
        close(sock);
        delete[] session_key;
        return;
    }

    // 4. Receive and check authorization status
    std::vector<unsigned char> auth_status_bytes = receive_encrypted_message(sock, session_key);
    if (auth_status_bytes.empty())
    {
        std::cerr << "[Client] Did not receive authorization status from server." << std::endl;
        close(sock);
        delete[] session_key;
        return;
    }
    std::string auth_status(auth_status_bytes.begin(), auth_status_bytes.end());

    if (auth_status != "AUTH_SUCCESS")
    {
        std::cerr << "[Client] Authentication failed. Server response: " << auth_status << std::endl;
        close(sock);
        delete[] session_key;
        return;
    }
    std::cout << "[Client] Authentication successful." << std::endl;
    // --- END OF AUTHENTICATION STAGE ---